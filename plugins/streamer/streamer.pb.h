// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: streamer.proto

#ifndef PROTOBUF_INCLUDED_streamer_2eproto
#define PROTOBUF_INCLUDED_streamer_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_streamer_2eproto 

namespace protobuf_streamer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_streamer_2eproto
namespace streamer {
class AudioSample;
class AudioSampleDefaultTypeInternal;
extern AudioSampleDefaultTypeInternal _AudioSample_default_instance_;
class CallInfo;
class CallInfoDefaultTypeInternal;
extern CallInfoDefaultTypeInternal _CallInfo_default_instance_;
class ConfigInfo;
class ConfigInfoDefaultTypeInternal;
extern ConfigInfoDefaultTypeInternal _ConfigInfo_default_instance_;
class RecorderInfo;
class RecorderInfoDefaultTypeInternal;
extern RecorderInfoDefaultTypeInternal _RecorderInfo_default_instance_;
class SignalInfo;
class SignalInfoDefaultTypeInternal;
extern SignalInfoDefaultTypeInternal _SignalInfo_default_instance_;
class SourceInfo;
class SourceInfoDefaultTypeInternal;
extern SourceInfoDefaultTypeInternal _SourceInfo_default_instance_;
class SystemInfo;
class SystemInfoDefaultTypeInternal;
extern SystemInfoDefaultTypeInternal _SystemInfo_default_instance_;
}  // namespace streamer
namespace google {
namespace protobuf {
template<> ::streamer::AudioSample* Arena::CreateMaybeMessage<::streamer::AudioSample>(Arena*);
template<> ::streamer::CallInfo* Arena::CreateMaybeMessage<::streamer::CallInfo>(Arena*);
template<> ::streamer::ConfigInfo* Arena::CreateMaybeMessage<::streamer::ConfigInfo>(Arena*);
template<> ::streamer::RecorderInfo* Arena::CreateMaybeMessage<::streamer::RecorderInfo>(Arena*);
template<> ::streamer::SignalInfo* Arena::CreateMaybeMessage<::streamer::SignalInfo>(Arena*);
template<> ::streamer::SourceInfo* Arena::CreateMaybeMessage<::streamer::SourceInfo>(Arena*);
template<> ::streamer::SystemInfo* Arena::CreateMaybeMessage<::streamer::SystemInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace streamer {

enum RecorderInfo_RecorderState {
  RecorderInfo_RecorderState_Monitoring = 0,
  RecorderInfo_RecorderState_Recording = 1,
  RecorderInfo_RecorderState_Inactive = 2,
  RecorderInfo_RecorderState_Active = 3,
  RecorderInfo_RecorderState_RecorderInfo_RecorderState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RecorderInfo_RecorderState_RecorderInfo_RecorderState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RecorderInfo_RecorderState_IsValid(int value);
const RecorderInfo_RecorderState RecorderInfo_RecorderState_RecorderState_MIN = RecorderInfo_RecorderState_Monitoring;
const RecorderInfo_RecorderState RecorderInfo_RecorderState_RecorderState_MAX = RecorderInfo_RecorderState_Active;
const int RecorderInfo_RecorderState_RecorderState_ARRAYSIZE = RecorderInfo_RecorderState_RecorderState_MAX + 1;

const ::google::protobuf::EnumDescriptor* RecorderInfo_RecorderState_descriptor();
inline const ::std::string& RecorderInfo_RecorderState_Name(RecorderInfo_RecorderState value) {
  return ::google::protobuf::internal::NameOfEnum(
    RecorderInfo_RecorderState_descriptor(), value);
}
inline bool RecorderInfo_RecorderState_Parse(
    const ::std::string& name, RecorderInfo_RecorderState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RecorderInfo_RecorderState>(
    RecorderInfo_RecorderState_descriptor(), name, value);
}
enum RecorderInfo_AudioFormat {
  RecorderInfo_AudioFormat_Float32 = 0,
  RecorderInfo_AudioFormat_Signed16 = 1,
  RecorderInfo_AudioFormat_Signed24 = 2,
  RecorderInfo_AudioFormat_Signed32 = 3,
  RecorderInfo_AudioFormat_Unsigned8 = 4,
  RecorderInfo_AudioFormat_RecorderInfo_AudioFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RecorderInfo_AudioFormat_RecorderInfo_AudioFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RecorderInfo_AudioFormat_IsValid(int value);
const RecorderInfo_AudioFormat RecorderInfo_AudioFormat_AudioFormat_MIN = RecorderInfo_AudioFormat_Float32;
const RecorderInfo_AudioFormat RecorderInfo_AudioFormat_AudioFormat_MAX = RecorderInfo_AudioFormat_Unsigned8;
const int RecorderInfo_AudioFormat_AudioFormat_ARRAYSIZE = RecorderInfo_AudioFormat_AudioFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* RecorderInfo_AudioFormat_descriptor();
inline const ::std::string& RecorderInfo_AudioFormat_Name(RecorderInfo_AudioFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    RecorderInfo_AudioFormat_descriptor(), value);
}
inline bool RecorderInfo_AudioFormat_Parse(
    const ::std::string& name, RecorderInfo_AudioFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RecorderInfo_AudioFormat>(
    RecorderInfo_AudioFormat_descriptor(), name, value);
}
enum SignalInfo_SignalType {
  SignalInfo_SignalType_Normal = 0,
  SignalInfo_SignalType_Emergency = 1,
  SignalInfo_SignalType_EmergencyAck = 2,
  SignalInfo_SignalType_RadioCheck = 3,
  SignalInfo_SignalType_RadioCheckAck = 4,
  SignalInfo_SignalType_RadioStun = 5,
  SignalInfo_SignalType_RadioStunAck = 6,
  SignalInfo_SignalType_RadioRevive = 7,
  SignalInfo_SignalType_RadioReviveAck = 8,
  SignalInfo_SignalType_NormalPre = 9,
  SignalInfo_SignalType_EmergencyPre = 10,
  SignalInfo_SignalType_SignalInfo_SignalType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SignalInfo_SignalType_SignalInfo_SignalType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SignalInfo_SignalType_IsValid(int value);
const SignalInfo_SignalType SignalInfo_SignalType_SignalType_MIN = SignalInfo_SignalType_Normal;
const SignalInfo_SignalType SignalInfo_SignalType_SignalType_MAX = SignalInfo_SignalType_EmergencyPre;
const int SignalInfo_SignalType_SignalType_ARRAYSIZE = SignalInfo_SignalType_SignalType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SignalInfo_SignalType_descriptor();
inline const ::std::string& SignalInfo_SignalType_Name(SignalInfo_SignalType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SignalInfo_SignalType_descriptor(), value);
}
inline bool SignalInfo_SignalType_Parse(
    const ::std::string& name, SignalInfo_SignalType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SignalInfo_SignalType>(
    SignalInfo_SignalType_descriptor(), name, value);
}
// ===================================================================

class AudioSample : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:streamer.AudioSample) */ {
 public:
  AudioSample();
  virtual ~AudioSample();

  AudioSample(const AudioSample& from);

  inline AudioSample& operator=(const AudioSample& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioSample(AudioSample&& from) noexcept
    : AudioSample() {
    *this = ::std::move(from);
  }

  inline AudioSample& operator=(AudioSample&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioSample& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioSample* internal_default_instance() {
    return reinterpret_cast<const AudioSample*>(
               &_AudioSample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AudioSample* other);
  friend void swap(AudioSample& a, AudioSample& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioSample* New() const final {
    return CreateMaybeMessage<AudioSample>(NULL);
  }

  AudioSample* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AudioSample>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AudioSample& from);
  void MergeFrom(const AudioSample& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioSample* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes sample = 2;
  void clear_sample();
  static const int kSampleFieldNumber = 2;
  const ::std::string& sample() const;
  void set_sample(const ::std::string& value);
  #if LANG_CXX11
  void set_sample(::std::string&& value);
  #endif
  void set_sample(const char* value);
  void set_sample(const void* value, size_t size);
  ::std::string* mutable_sample();
  ::std::string* release_sample();
  void set_allocated_sample(::std::string* sample);

  // int32 recorder_num = 1;
  void clear_recorder_num();
  static const int kRecorderNumFieldNumber = 1;
  ::google::protobuf::int32 recorder_num() const;
  void set_recorder_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:streamer.AudioSample)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sample_;
  ::google::protobuf::int32 recorder_num_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_streamer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecorderInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:streamer.RecorderInfo) */ {
 public:
  RecorderInfo();
  virtual ~RecorderInfo();

  RecorderInfo(const RecorderInfo& from);

  inline RecorderInfo& operator=(const RecorderInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecorderInfo(RecorderInfo&& from) noexcept
    : RecorderInfo() {
    *this = ::std::move(from);
  }

  inline RecorderInfo& operator=(RecorderInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecorderInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecorderInfo* internal_default_instance() {
    return reinterpret_cast<const RecorderInfo*>(
               &_RecorderInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RecorderInfo* other);
  friend void swap(RecorderInfo& a, RecorderInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecorderInfo* New() const final {
    return CreateMaybeMessage<RecorderInfo>(NULL);
  }

  RecorderInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecorderInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecorderInfo& from);
  void MergeFrom(const RecorderInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecorderInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RecorderInfo_RecorderState RecorderState;
  static const RecorderState Monitoring =
    RecorderInfo_RecorderState_Monitoring;
  static const RecorderState Recording =
    RecorderInfo_RecorderState_Recording;
  static const RecorderState Inactive =
    RecorderInfo_RecorderState_Inactive;
  static const RecorderState Active =
    RecorderInfo_RecorderState_Active;
  static inline bool RecorderState_IsValid(int value) {
    return RecorderInfo_RecorderState_IsValid(value);
  }
  static const RecorderState RecorderState_MIN =
    RecorderInfo_RecorderState_RecorderState_MIN;
  static const RecorderState RecorderState_MAX =
    RecorderInfo_RecorderState_RecorderState_MAX;
  static const int RecorderState_ARRAYSIZE =
    RecorderInfo_RecorderState_RecorderState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RecorderState_descriptor() {
    return RecorderInfo_RecorderState_descriptor();
  }
  static inline const ::std::string& RecorderState_Name(RecorderState value) {
    return RecorderInfo_RecorderState_Name(value);
  }
  static inline bool RecorderState_Parse(const ::std::string& name,
      RecorderState* value) {
    return RecorderInfo_RecorderState_Parse(name, value);
  }

  typedef RecorderInfo_AudioFormat AudioFormat;
  static const AudioFormat Float32 =
    RecorderInfo_AudioFormat_Float32;
  static const AudioFormat Signed16 =
    RecorderInfo_AudioFormat_Signed16;
  static const AudioFormat Signed24 =
    RecorderInfo_AudioFormat_Signed24;
  static const AudioFormat Signed32 =
    RecorderInfo_AudioFormat_Signed32;
  static const AudioFormat Unsigned8 =
    RecorderInfo_AudioFormat_Unsigned8;
  static inline bool AudioFormat_IsValid(int value) {
    return RecorderInfo_AudioFormat_IsValid(value);
  }
  static const AudioFormat AudioFormat_MIN =
    RecorderInfo_AudioFormat_AudioFormat_MIN;
  static const AudioFormat AudioFormat_MAX =
    RecorderInfo_AudioFormat_AudioFormat_MAX;
  static const int AudioFormat_ARRAYSIZE =
    RecorderInfo_AudioFormat_AudioFormat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AudioFormat_descriptor() {
    return RecorderInfo_AudioFormat_descriptor();
  }
  static inline const ::std::string& AudioFormat_Name(AudioFormat value) {
    return RecorderInfo_AudioFormat_Name(value);
  }
  static inline bool AudioFormat_Parse(const ::std::string& name,
      AudioFormat* value) {
    return RecorderInfo_AudioFormat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string recorder_type = 2;
  void clear_recorder_type();
  static const int kRecorderTypeFieldNumber = 2;
  const ::std::string& recorder_type() const;
  void set_recorder_type(const ::std::string& value);
  #if LANG_CXX11
  void set_recorder_type(::std::string&& value);
  #endif
  void set_recorder_type(const char* value);
  void set_recorder_type(const char* value, size_t size);
  ::std::string* mutable_recorder_type();
  ::std::string* release_recorder_type();
  void set_allocated_recorder_type(::std::string* recorder_type);

  // string id = 4;
  void clear_id();
  static const int kIdFieldNumber = 4;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // int32 recorder_num = 1;
  void clear_recorder_num();
  static const int kRecorderNumFieldNumber = 1;
  ::google::protobuf::int32 recorder_num() const;
  void set_recorder_num(::google::protobuf::int32 value);

  // int32 source_num = 3;
  void clear_source_num();
  static const int kSourceNumFieldNumber = 3;
  ::google::protobuf::int32 source_num() const;
  void set_source_num(::google::protobuf::int32 value);

  // double recorder_duration = 6;
  void clear_recorder_duration();
  static const int kRecorderDurationFieldNumber = 6;
  double recorder_duration() const;
  void set_recorder_duration(double value);

  // int32 recorder_count = 5;
  void clear_recorder_count();
  static const int kRecorderCountFieldNumber = 5;
  ::google::protobuf::int32 recorder_count() const;
  void set_recorder_count(::google::protobuf::int32 value);

  // .streamer.RecorderInfo.RecorderState recorder_state = 7;
  void clear_recorder_state();
  static const int kRecorderStateFieldNumber = 7;
  ::streamer::RecorderInfo_RecorderState recorder_state() const;
  void set_recorder_state(::streamer::RecorderInfo_RecorderState value);

  // double status_len = 8;
  void clear_status_len();
  static const int kStatusLenFieldNumber = 8;
  double status_len() const;
  void set_status_len(double value);

  // double status_error = 9;
  void clear_status_error();
  static const int kStatusErrorFieldNumber = 9;
  double status_error() const;
  void set_status_error(double value);

  // double status_spike = 10;
  void clear_status_spike();
  static const int kStatusSpikeFieldNumber = 10;
  double status_spike() const;
  void set_status_spike(double value);

  // int32 audio_sample_rate = 11;
  void clear_audio_sample_rate();
  static const int kAudioSampleRateFieldNumber = 11;
  ::google::protobuf::int32 audio_sample_rate() const;
  void set_audio_sample_rate(::google::protobuf::int32 value);

  // int32 audio_channels = 12;
  void clear_audio_channels();
  static const int kAudioChannelsFieldNumber = 12;
  ::google::protobuf::int32 audio_channels() const;
  void set_audio_channels(::google::protobuf::int32 value);

  // .streamer.RecorderInfo.AudioFormat audio_format = 13;
  void clear_audio_format();
  static const int kAudioFormatFieldNumber = 13;
  ::streamer::RecorderInfo_AudioFormat audio_format() const;
  void set_audio_format(::streamer::RecorderInfo_AudioFormat value);

  // @@protoc_insertion_point(class_scope:streamer.RecorderInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr recorder_type_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::int32 recorder_num_;
  ::google::protobuf::int32 source_num_;
  double recorder_duration_;
  ::google::protobuf::int32 recorder_count_;
  int recorder_state_;
  double status_len_;
  double status_error_;
  double status_spike_;
  ::google::protobuf::int32 audio_sample_rate_;
  ::google::protobuf::int32 audio_channels_;
  int audio_format_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_streamer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:streamer.SourceInfo) */ {
 public:
  SourceInfo();
  virtual ~SourceInfo();

  SourceInfo(const SourceInfo& from);

  inline SourceInfo& operator=(const SourceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceInfo(SourceInfo&& from) noexcept
    : SourceInfo() {
    *this = ::std::move(from);
  }

  inline SourceInfo& operator=(SourceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceInfo* internal_default_instance() {
    return reinterpret_cast<const SourceInfo*>(
               &_SourceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SourceInfo* other);
  friend void swap(SourceInfo& a, SourceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceInfo* New() const final {
    return CreateMaybeMessage<SourceInfo>(NULL);
  }

  SourceInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SourceInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SourceInfo& from);
  void MergeFrom(const SourceInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string driver = 6;
  void clear_driver();
  static const int kDriverFieldNumber = 6;
  const ::std::string& driver() const;
  void set_driver(const ::std::string& value);
  #if LANG_CXX11
  void set_driver(::std::string&& value);
  #endif
  void set_driver(const char* value);
  void set_driver(const char* value, size_t size);
  ::std::string* mutable_driver();
  ::std::string* release_driver();
  void set_allocated_driver(::std::string* driver);

  // string device = 7;
  void clear_device();
  static const int kDeviceFieldNumber = 7;
  const ::std::string& device() const;
  void set_device(const ::std::string& value);
  #if LANG_CXX11
  void set_device(::std::string&& value);
  #endif
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  ::std::string* mutable_device();
  ::std::string* release_device();
  void set_allocated_device(::std::string* device);

  // string antenna = 8;
  void clear_antenna();
  static const int kAntennaFieldNumber = 8;
  const ::std::string& antenna() const;
  void set_antenna(const ::std::string& value);
  #if LANG_CXX11
  void set_antenna(::std::string&& value);
  #endif
  void set_antenna(const char* value);
  void set_antenna(const char* value, size_t size);
  ::std::string* mutable_antenna();
  ::std::string* release_antenna();
  void set_allocated_antenna(::std::string* antenna);

  // double min_hz = 2;
  void clear_min_hz();
  static const int kMinHzFieldNumber = 2;
  double min_hz() const;
  void set_min_hz(double value);

  // double max_hz = 3;
  void clear_max_hz();
  static const int kMaxHzFieldNumber = 3;
  double max_hz() const;
  void set_max_hz(double value);

  // double center_hz = 4;
  void clear_center_hz();
  static const int kCenterHzFieldNumber = 4;
  double center_hz() const;
  void set_center_hz(double value);

  // double rate = 5;
  void clear_rate();
  static const int kRateFieldNumber = 5;
  double rate() const;
  void set_rate(double value);

  // int32 source_num = 1;
  void clear_source_num();
  static const int kSourceNumFieldNumber = 1;
  ::google::protobuf::int32 source_num() const;
  void set_source_num(::google::protobuf::int32 value);

  // int32 mix_gain = 10;
  void clear_mix_gain();
  static const int kMixGainFieldNumber = 10;
  ::google::protobuf::int32 mix_gain() const;
  void set_mix_gain(::google::protobuf::int32 value);

  // double error = 9;
  void clear_error();
  static const int kErrorFieldNumber = 9;
  double error() const;
  void set_error(double value);

  // int32 lna_gain = 11;
  void clear_lna_gain();
  static const int kLnaGainFieldNumber = 11;
  ::google::protobuf::int32 lna_gain() const;
  void set_lna_gain(::google::protobuf::int32 value);

  // int32 vga1_gain = 12;
  void clear_vga1_gain();
  static const int kVga1GainFieldNumber = 12;
  ::google::protobuf::int32 vga1_gain() const;
  void set_vga1_gain(::google::protobuf::int32 value);

  // int32 vga2_gain = 13;
  void clear_vga2_gain();
  static const int kVga2GainFieldNumber = 13;
  ::google::protobuf::int32 vga2_gain() const;
  void set_vga2_gain(::google::protobuf::int32 value);

  // int32 bb_gain = 14;
  void clear_bb_gain();
  static const int kBbGainFieldNumber = 14;
  ::google::protobuf::int32 bb_gain() const;
  void set_bb_gain(::google::protobuf::int32 value);

  // int32 gain = 15;
  void clear_gain();
  static const int kGainFieldNumber = 15;
  ::google::protobuf::int32 gain() const;
  void set_gain(::google::protobuf::int32 value);

  // int32 if_gain = 16;
  void clear_if_gain();
  static const int kIfGainFieldNumber = 16;
  ::google::protobuf::int32 if_gain() const;
  void set_if_gain(::google::protobuf::int32 value);

  // int32 analog_recorders = 17;
  void clear_analog_recorders();
  static const int kAnalogRecordersFieldNumber = 17;
  ::google::protobuf::int32 analog_recorders() const;
  void set_analog_recorders(::google::protobuf::int32 value);

  // int32 digital_recorders = 18;
  void clear_digital_recorders();
  static const int kDigitalRecordersFieldNumber = 18;
  ::google::protobuf::int32 digital_recorders() const;
  void set_digital_recorders(::google::protobuf::int32 value);

  // int32 debug_recorders = 19;
  void clear_debug_recorders();
  static const int kDebugRecordersFieldNumber = 19;
  ::google::protobuf::int32 debug_recorders() const;
  void set_debug_recorders(::google::protobuf::int32 value);

  // int32 sigmf_recorders = 20;
  void clear_sigmf_recorders();
  static const int kSigmfRecordersFieldNumber = 20;
  ::google::protobuf::int32 sigmf_recorders() const;
  void set_sigmf_recorders(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:streamer.SourceInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr driver_;
  ::google::protobuf::internal::ArenaStringPtr device_;
  ::google::protobuf::internal::ArenaStringPtr antenna_;
  double min_hz_;
  double max_hz_;
  double center_hz_;
  double rate_;
  ::google::protobuf::int32 source_num_;
  ::google::protobuf::int32 mix_gain_;
  double error_;
  ::google::protobuf::int32 lna_gain_;
  ::google::protobuf::int32 vga1_gain_;
  ::google::protobuf::int32 vga2_gain_;
  ::google::protobuf::int32 bb_gain_;
  ::google::protobuf::int32 gain_;
  ::google::protobuf::int32 if_gain_;
  ::google::protobuf::int32 analog_recorders_;
  ::google::protobuf::int32 digital_recorders_;
  ::google::protobuf::int32 debug_recorders_;
  ::google::protobuf::int32 sigmf_recorders_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_streamer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SystemInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:streamer.SystemInfo) */ {
 public:
  SystemInfo();
  virtual ~SystemInfo();

  SystemInfo(const SystemInfo& from);

  inline SystemInfo& operator=(const SystemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SystemInfo(SystemInfo&& from) noexcept
    : SystemInfo() {
    *this = ::std::move(from);
  }

  inline SystemInfo& operator=(SystemInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemInfo* internal_default_instance() {
    return reinterpret_cast<const SystemInfo*>(
               &_SystemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SystemInfo* other);
  friend void swap(SystemInfo& a, SystemInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SystemInfo* New() const final {
    return CreateMaybeMessage<SystemInfo>(NULL);
  }

  SystemInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SystemInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SystemInfo& from);
  void MergeFrom(const SystemInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double channels = 13;
  int channels_size() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 13;
  double channels(int index) const;
  void set_channels(int index, double value);
  void add_channels(double value);
  const ::google::protobuf::RepeatedField< double >&
      channels() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_channels();

  // string system_type = 2;
  void clear_system_type();
  static const int kSystemTypeFieldNumber = 2;
  const ::std::string& system_type() const;
  void set_system_type(const ::std::string& value);
  #if LANG_CXX11
  void set_system_type(::std::string&& value);
  #endif
  void set_system_type(const char* value);
  void set_system_type(const char* value, size_t size);
  ::std::string* mutable_system_type();
  ::std::string* release_system_type();
  void set_allocated_system_type(::std::string* system_type);

  // string system_name = 3;
  void clear_system_name();
  static const int kSystemNameFieldNumber = 3;
  const ::std::string& system_name() const;
  void set_system_name(const ::std::string& value);
  #if LANG_CXX11
  void set_system_name(::std::string&& value);
  #endif
  void set_system_name(const char* value);
  void set_system_name(const char* value, size_t size);
  ::std::string* mutable_system_name();
  ::std::string* release_system_name();
  void set_allocated_system_name(::std::string* system_name);

  // string upload_script = 5;
  void clear_upload_script();
  static const int kUploadScriptFieldNumber = 5;
  const ::std::string& upload_script() const;
  void set_upload_script(const ::std::string& value);
  #if LANG_CXX11
  void set_upload_script(::std::string&& value);
  #endif
  void set_upload_script(const char* value);
  void set_upload_script(const char* value, size_t size);
  ::std::string* mutable_upload_script();
  ::std::string* release_upload_script();
  void set_allocated_upload_script(::std::string* upload_script);

  // string talkgroups_file = 8;
  void clear_talkgroups_file();
  static const int kTalkgroupsFileFieldNumber = 8;
  const ::std::string& talkgroups_file() const;
  void set_talkgroups_file(const ::std::string& value);
  #if LANG_CXX11
  void set_talkgroups_file(::std::string&& value);
  #endif
  void set_talkgroups_file(const char* value);
  void set_talkgroups_file(const char* value, size_t size);
  ::std::string* mutable_talkgroups_file();
  ::std::string* release_talkgroups_file();
  void set_allocated_talkgroups_file(::std::string* talkgroups_file);

  // string bandplan = 14;
  void clear_bandplan();
  static const int kBandplanFieldNumber = 14;
  const ::std::string& bandplan() const;
  void set_bandplan(const ::std::string& value);
  #if LANG_CXX11
  void set_bandplan(::std::string&& value);
  #endif
  void set_bandplan(const char* value);
  void set_bandplan(const char* value, size_t size);
  ::std::string* mutable_bandplan();
  ::std::string* release_bandplan();
  void set_allocated_bandplan(::std::string* bandplan);

  // int32 system_num = 1;
  void clear_system_num();
  static const int kSystemNumFieldNumber = 1;
  ::google::protobuf::int32 system_num() const;
  void set_system_num(::google::protobuf::int32 value);

  // bool audio_archive = 4;
  void clear_audio_archive();
  static const int kAudioArchiveFieldNumber = 4;
  bool audio_archive() const;
  void set_audio_archive(bool value);

  // bool record_unknown = 6;
  void clear_record_unknown();
  static const int kRecordUnknownFieldNumber = 6;
  bool record_unknown() const;
  void set_record_unknown(bool value);

  // bool call_log = 7;
  void clear_call_log();
  static const int kCallLogFieldNumber = 7;
  bool call_log() const;
  void set_call_log(bool value);

  // bool qpsk = 11;
  void clear_qpsk();
  static const int kQpskFieldNumber = 11;
  bool qpsk() const;
  void set_qpsk(bool value);

  // double analog_levels = 9;
  void clear_analog_levels();
  static const int kAnalogLevelsFieldNumber = 9;
  double analog_levels() const;
  void set_analog_levels(double value);

  // double digital_levels = 10;
  void clear_digital_levels();
  static const int kDigitalLevelsFieldNumber = 10;
  double digital_levels() const;
  void set_digital_levels(double value);

  // double squelch_db = 12;
  void clear_squelch_db();
  static const int kSquelchDbFieldNumber = 12;
  double squelch_db() const;
  void set_squelch_db(double value);

  // double bandplan_base = 16;
  void clear_bandplan_base();
  static const int kBandplanBaseFieldNumber = 16;
  double bandplan_base() const;
  void set_bandplan_base(double value);

  // double bandplan_high = 17;
  void clear_bandplan_high();
  static const int kBandplanHighFieldNumber = 17;
  double bandplan_high() const;
  void set_bandplan_high(double value);

  // int32 bandfreq = 15;
  void clear_bandfreq();
  static const int kBandfreqFieldNumber = 15;
  ::google::protobuf::int32 bandfreq() const;
  void set_bandfreq(::google::protobuf::int32 value);

  // int32 bandplan_offset = 19;
  void clear_bandplan_offset();
  static const int kBandplanOffsetFieldNumber = 19;
  ::google::protobuf::int32 bandplan_offset() const;
  void set_bandplan_offset(::google::protobuf::int32 value);

  // double bandplan_spacing = 18;
  void clear_bandplan_spacing();
  static const int kBandplanSpacingFieldNumber = 18;
  double bandplan_spacing() const;
  void set_bandplan_spacing(double value);

  // @@protoc_insertion_point(class_scope:streamer.SystemInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > channels_;
  mutable int _channels_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr system_type_;
  ::google::protobuf::internal::ArenaStringPtr system_name_;
  ::google::protobuf::internal::ArenaStringPtr upload_script_;
  ::google::protobuf::internal::ArenaStringPtr talkgroups_file_;
  ::google::protobuf::internal::ArenaStringPtr bandplan_;
  ::google::protobuf::int32 system_num_;
  bool audio_archive_;
  bool record_unknown_;
  bool call_log_;
  bool qpsk_;
  double analog_levels_;
  double digital_levels_;
  double squelch_db_;
  double bandplan_base_;
  double bandplan_high_;
  ::google::protobuf::int32 bandfreq_;
  ::google::protobuf::int32 bandplan_offset_;
  double bandplan_spacing_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_streamer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:streamer.ConfigInfo) */ {
 public:
  ConfigInfo();
  virtual ~ConfigInfo();

  ConfigInfo(const ConfigInfo& from);

  inline ConfigInfo& operator=(const ConfigInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigInfo(ConfigInfo&& from) noexcept
    : ConfigInfo() {
    *this = ::std::move(from);
  }

  inline ConfigInfo& operator=(ConfigInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigInfo* internal_default_instance() {
    return reinterpret_cast<const ConfigInfo*>(
               &_ConfigInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ConfigInfo* other);
  friend void swap(ConfigInfo& a, ConfigInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigInfo* New() const final {
    return CreateMaybeMessage<ConfigInfo>(NULL);
  }

  ConfigInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigInfo& from);
  void MergeFrom(const ConfigInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .streamer.SourceInfo sources = 1;
  int sources_size() const;
  void clear_sources();
  static const int kSourcesFieldNumber = 1;
  ::streamer::SourceInfo* mutable_sources(int index);
  ::google::protobuf::RepeatedPtrField< ::streamer::SourceInfo >*
      mutable_sources();
  const ::streamer::SourceInfo& sources(int index) const;
  ::streamer::SourceInfo* add_sources();
  const ::google::protobuf::RepeatedPtrField< ::streamer::SourceInfo >&
      sources() const;

  // repeated .streamer.SystemInfo systems = 2;
  int systems_size() const;
  void clear_systems();
  static const int kSystemsFieldNumber = 2;
  ::streamer::SystemInfo* mutable_systems(int index);
  ::google::protobuf::RepeatedPtrField< ::streamer::SystemInfo >*
      mutable_systems();
  const ::streamer::SystemInfo& systems(int index) const;
  ::streamer::SystemInfo* add_systems();
  const ::google::protobuf::RepeatedPtrField< ::streamer::SystemInfo >&
      systems() const;

  // string capture_dir = 3;
  void clear_capture_dir();
  static const int kCaptureDirFieldNumber = 3;
  const ::std::string& capture_dir() const;
  void set_capture_dir(const ::std::string& value);
  #if LANG_CXX11
  void set_capture_dir(::std::string&& value);
  #endif
  void set_capture_dir(const char* value);
  void set_capture_dir(const char* value, size_t size);
  ::std::string* mutable_capture_dir();
  ::std::string* release_capture_dir();
  void set_allocated_capture_dir(::std::string* capture_dir);

  // string upload_server = 4;
  void clear_upload_server();
  static const int kUploadServerFieldNumber = 4;
  const ::std::string& upload_server() const;
  void set_upload_server(const ::std::string& value);
  #if LANG_CXX11
  void set_upload_server(::std::string&& value);
  #endif
  void set_upload_server(const char* value);
  void set_upload_server(const char* value, size_t size);
  ::std::string* mutable_upload_server();
  ::std::string* release_upload_server();
  void set_allocated_upload_server(::std::string* upload_server);

  // string instance_id = 7;
  void clear_instance_id();
  static const int kInstanceIdFieldNumber = 7;
  const ::std::string& instance_id() const;
  void set_instance_id(const ::std::string& value);
  #if LANG_CXX11
  void set_instance_id(::std::string&& value);
  #endif
  void set_instance_id(const char* value);
  void set_instance_id(const char* value, size_t size);
  ::std::string* mutable_instance_id();
  ::std::string* release_instance_id();
  void set_allocated_instance_id(::std::string* instance_id);

  // string instance_key = 8;
  void clear_instance_key();
  static const int kInstanceKeyFieldNumber = 8;
  const ::std::string& instance_key() const;
  void set_instance_key(const ::std::string& value);
  #if LANG_CXX11
  void set_instance_key(::std::string&& value);
  #endif
  void set_instance_key(const char* value);
  void set_instance_key(const char* value, size_t size);
  ::std::string* mutable_instance_key();
  ::std::string* release_instance_key();
  void set_allocated_instance_key(::std::string* instance_key);

  // int32 call_timeout = 5;
  void clear_call_timeout();
  static const int kCallTimeoutFieldNumber = 5;
  ::google::protobuf::int32 call_timeout() const;
  void set_call_timeout(::google::protobuf::int32 value);

  // bool log_file = 6;
  void clear_log_file();
  static const int kLogFileFieldNumber = 6;
  bool log_file() const;
  void set_log_file(bool value);

  // bool broadcast_signals = 9;
  void clear_broadcast_signals();
  static const int kBroadcastSignalsFieldNumber = 9;
  bool broadcast_signals() const;
  void set_broadcast_signals(bool value);

  // @@protoc_insertion_point(class_scope:streamer.ConfigInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::streamer::SourceInfo > sources_;
  ::google::protobuf::RepeatedPtrField< ::streamer::SystemInfo > systems_;
  ::google::protobuf::internal::ArenaStringPtr capture_dir_;
  ::google::protobuf::internal::ArenaStringPtr upload_server_;
  ::google::protobuf::internal::ArenaStringPtr instance_id_;
  ::google::protobuf::internal::ArenaStringPtr instance_key_;
  ::google::protobuf::int32 call_timeout_;
  bool log_file_;
  bool broadcast_signals_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_streamer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CallInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:streamer.CallInfo) */ {
 public:
  CallInfo();
  virtual ~CallInfo();

  CallInfo(const CallInfo& from);

  inline CallInfo& operator=(const CallInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CallInfo(CallInfo&& from) noexcept
    : CallInfo() {
    *this = ::std::move(from);
  }

  inline CallInfo& operator=(CallInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CallInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CallInfo* internal_default_instance() {
    return reinterpret_cast<const CallInfo*>(
               &_CallInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CallInfo* other);
  friend void swap(CallInfo& a, CallInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CallInfo* New() const final {
    return CreateMaybeMessage<CallInfo>(NULL);
  }

  CallInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CallInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CallInfo& from);
  void MergeFrom(const CallInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool call_active = 1;
  void clear_call_active();
  static const int kCallActiveFieldNumber = 1;
  bool call_active() const;
  void set_call_active(bool value);

  // int32 recorder_num = 2;
  void clear_recorder_num();
  static const int kRecorderNumFieldNumber = 2;
  ::google::protobuf::int32 recorder_num() const;
  void set_recorder_num(::google::protobuf::int32 value);

  // double curr_freq = 4;
  void clear_curr_freq();
  static const int kCurrFreqFieldNumber = 4;
  double curr_freq() const;
  void set_curr_freq(double value);

  // int32 system_num = 3;
  void clear_system_num();
  static const int kSystemNumFieldNumber = 3;
  ::google::protobuf::int32 system_num() const;
  void set_system_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:streamer.CallInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool call_active_;
  ::google::protobuf::int32 recorder_num_;
  double curr_freq_;
  ::google::protobuf::int32 system_num_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_streamer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SignalInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:streamer.SignalInfo) */ {
 public:
  SignalInfo();
  virtual ~SignalInfo();

  SignalInfo(const SignalInfo& from);

  inline SignalInfo& operator=(const SignalInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignalInfo(SignalInfo&& from) noexcept
    : SignalInfo() {
    *this = ::std::move(from);
  }

  inline SignalInfo& operator=(SignalInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SignalInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignalInfo* internal_default_instance() {
    return reinterpret_cast<const SignalInfo*>(
               &_SignalInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(SignalInfo* other);
  friend void swap(SignalInfo& a, SignalInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignalInfo* New() const final {
    return CreateMaybeMessage<SignalInfo>(NULL);
  }

  SignalInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SignalInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SignalInfo& from);
  void MergeFrom(const SignalInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SignalInfo_SignalType SignalType;
  static const SignalType Normal =
    SignalInfo_SignalType_Normal;
  static const SignalType Emergency =
    SignalInfo_SignalType_Emergency;
  static const SignalType EmergencyAck =
    SignalInfo_SignalType_EmergencyAck;
  static const SignalType RadioCheck =
    SignalInfo_SignalType_RadioCheck;
  static const SignalType RadioCheckAck =
    SignalInfo_SignalType_RadioCheckAck;
  static const SignalType RadioStun =
    SignalInfo_SignalType_RadioStun;
  static const SignalType RadioStunAck =
    SignalInfo_SignalType_RadioStunAck;
  static const SignalType RadioRevive =
    SignalInfo_SignalType_RadioRevive;
  static const SignalType RadioReviveAck =
    SignalInfo_SignalType_RadioReviveAck;
  static const SignalType NormalPre =
    SignalInfo_SignalType_NormalPre;
  static const SignalType EmergencyPre =
    SignalInfo_SignalType_EmergencyPre;
  static inline bool SignalType_IsValid(int value) {
    return SignalInfo_SignalType_IsValid(value);
  }
  static const SignalType SignalType_MIN =
    SignalInfo_SignalType_SignalType_MIN;
  static const SignalType SignalType_MAX =
    SignalInfo_SignalType_SignalType_MAX;
  static const int SignalType_ARRAYSIZE =
    SignalInfo_SignalType_SignalType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SignalType_descriptor() {
    return SignalInfo_SignalType_descriptor();
  }
  static inline const ::std::string& SignalType_Name(SignalType value) {
    return SignalInfo_SignalType_Name(value);
  }
  static inline bool SignalType_Parse(const ::std::string& name,
      SignalType* value) {
    return SignalInfo_SignalType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string signaling_type = 2;
  void clear_signaling_type();
  static const int kSignalingTypeFieldNumber = 2;
  const ::std::string& signaling_type() const;
  void set_signaling_type(const ::std::string& value);
  #if LANG_CXX11
  void set_signaling_type(::std::string&& value);
  #endif
  void set_signaling_type(const char* value);
  void set_signaling_type(const char* value, size_t size);
  ::std::string* mutable_signaling_type();
  ::std::string* release_signaling_type();
  void set_allocated_signaling_type(::std::string* signaling_type);

  // .streamer.CallInfo call_info = 4;
  bool has_call_info() const;
  void clear_call_info();
  static const int kCallInfoFieldNumber = 4;
  private:
  const ::streamer::CallInfo& _internal_call_info() const;
  public:
  const ::streamer::CallInfo& call_info() const;
  ::streamer::CallInfo* release_call_info();
  ::streamer::CallInfo* mutable_call_info();
  void set_allocated_call_info(::streamer::CallInfo* call_info);

  // .streamer.SystemInfo system_info = 5;
  bool has_system_info() const;
  void clear_system_info();
  static const int kSystemInfoFieldNumber = 5;
  private:
  const ::streamer::SystemInfo& _internal_system_info() const;
  public:
  const ::streamer::SystemInfo& system_info() const;
  ::streamer::SystemInfo* release_system_info();
  ::streamer::SystemInfo* mutable_system_info();
  void set_allocated_system_info(::streamer::SystemInfo* system_info);

  // .streamer.RecorderInfo recorder_info = 6;
  bool has_recorder_info() const;
  void clear_recorder_info();
  static const int kRecorderInfoFieldNumber = 6;
  private:
  const ::streamer::RecorderInfo& _internal_recorder_info() const;
  public:
  const ::streamer::RecorderInfo& recorder_info() const;
  ::streamer::RecorderInfo* release_recorder_info();
  ::streamer::RecorderInfo* mutable_recorder_info();
  void set_allocated_recorder_info(::streamer::RecorderInfo* recorder_info);

  // int64 unit_id = 1;
  void clear_unit_id();
  static const int kUnitIdFieldNumber = 1;
  ::google::protobuf::int64 unit_id() const;
  void set_unit_id(::google::protobuf::int64 value);

  // .streamer.SignalInfo.SignalType signal_type = 3;
  void clear_signal_type();
  static const int kSignalTypeFieldNumber = 3;
  ::streamer::SignalInfo_SignalType signal_type() const;
  void set_signal_type(::streamer::SignalInfo_SignalType value);

  // @@protoc_insertion_point(class_scope:streamer.SignalInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr signaling_type_;
  ::streamer::CallInfo* call_info_;
  ::streamer::SystemInfo* system_info_;
  ::streamer::RecorderInfo* recorder_info_;
  ::google::protobuf::int64 unit_id_;
  int signal_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_streamer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AudioSample

// int32 recorder_num = 1;
inline void AudioSample::clear_recorder_num() {
  recorder_num_ = 0;
}
inline ::google::protobuf::int32 AudioSample::recorder_num() const {
  // @@protoc_insertion_point(field_get:streamer.AudioSample.recorder_num)
  return recorder_num_;
}
inline void AudioSample::set_recorder_num(::google::protobuf::int32 value) {
  
  recorder_num_ = value;
  // @@protoc_insertion_point(field_set:streamer.AudioSample.recorder_num)
}

// bytes sample = 2;
inline void AudioSample::clear_sample() {
  sample_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AudioSample::sample() const {
  // @@protoc_insertion_point(field_get:streamer.AudioSample.sample)
  return sample_.GetNoArena();
}
inline void AudioSample::set_sample(const ::std::string& value) {
  
  sample_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:streamer.AudioSample.sample)
}
#if LANG_CXX11
inline void AudioSample::set_sample(::std::string&& value) {
  
  sample_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:streamer.AudioSample.sample)
}
#endif
inline void AudioSample::set_sample(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sample_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:streamer.AudioSample.sample)
}
inline void AudioSample::set_sample(const void* value, size_t size) {
  
  sample_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:streamer.AudioSample.sample)
}
inline ::std::string* AudioSample::mutable_sample() {
  
  // @@protoc_insertion_point(field_mutable:streamer.AudioSample.sample)
  return sample_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioSample::release_sample() {
  // @@protoc_insertion_point(field_release:streamer.AudioSample.sample)
  
  return sample_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioSample::set_allocated_sample(::std::string* sample) {
  if (sample != NULL) {
    
  } else {
    
  }
  sample_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sample);
  // @@protoc_insertion_point(field_set_allocated:streamer.AudioSample.sample)
}

// -------------------------------------------------------------------

// RecorderInfo

// int32 recorder_num = 1;
inline void RecorderInfo::clear_recorder_num() {
  recorder_num_ = 0;
}
inline ::google::protobuf::int32 RecorderInfo::recorder_num() const {
  // @@protoc_insertion_point(field_get:streamer.RecorderInfo.recorder_num)
  return recorder_num_;
}
inline void RecorderInfo::set_recorder_num(::google::protobuf::int32 value) {
  
  recorder_num_ = value;
  // @@protoc_insertion_point(field_set:streamer.RecorderInfo.recorder_num)
}

// string recorder_type = 2;
inline void RecorderInfo::clear_recorder_type() {
  recorder_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecorderInfo::recorder_type() const {
  // @@protoc_insertion_point(field_get:streamer.RecorderInfo.recorder_type)
  return recorder_type_.GetNoArena();
}
inline void RecorderInfo::set_recorder_type(const ::std::string& value) {
  
  recorder_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:streamer.RecorderInfo.recorder_type)
}
#if LANG_CXX11
inline void RecorderInfo::set_recorder_type(::std::string&& value) {
  
  recorder_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:streamer.RecorderInfo.recorder_type)
}
#endif
inline void RecorderInfo::set_recorder_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  recorder_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:streamer.RecorderInfo.recorder_type)
}
inline void RecorderInfo::set_recorder_type(const char* value, size_t size) {
  
  recorder_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:streamer.RecorderInfo.recorder_type)
}
inline ::std::string* RecorderInfo::mutable_recorder_type() {
  
  // @@protoc_insertion_point(field_mutable:streamer.RecorderInfo.recorder_type)
  return recorder_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecorderInfo::release_recorder_type() {
  // @@protoc_insertion_point(field_release:streamer.RecorderInfo.recorder_type)
  
  return recorder_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecorderInfo::set_allocated_recorder_type(::std::string* recorder_type) {
  if (recorder_type != NULL) {
    
  } else {
    
  }
  recorder_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recorder_type);
  // @@protoc_insertion_point(field_set_allocated:streamer.RecorderInfo.recorder_type)
}

// int32 source_num = 3;
inline void RecorderInfo::clear_source_num() {
  source_num_ = 0;
}
inline ::google::protobuf::int32 RecorderInfo::source_num() const {
  // @@protoc_insertion_point(field_get:streamer.RecorderInfo.source_num)
  return source_num_;
}
inline void RecorderInfo::set_source_num(::google::protobuf::int32 value) {
  
  source_num_ = value;
  // @@protoc_insertion_point(field_set:streamer.RecorderInfo.source_num)
}

// string id = 4;
inline void RecorderInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecorderInfo::id() const {
  // @@protoc_insertion_point(field_get:streamer.RecorderInfo.id)
  return id_.GetNoArena();
}
inline void RecorderInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:streamer.RecorderInfo.id)
}
#if LANG_CXX11
inline void RecorderInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:streamer.RecorderInfo.id)
}
#endif
inline void RecorderInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:streamer.RecorderInfo.id)
}
inline void RecorderInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:streamer.RecorderInfo.id)
}
inline ::std::string* RecorderInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:streamer.RecorderInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecorderInfo::release_id() {
  // @@protoc_insertion_point(field_release:streamer.RecorderInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecorderInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:streamer.RecorderInfo.id)
}

// int32 recorder_count = 5;
inline void RecorderInfo::clear_recorder_count() {
  recorder_count_ = 0;
}
inline ::google::protobuf::int32 RecorderInfo::recorder_count() const {
  // @@protoc_insertion_point(field_get:streamer.RecorderInfo.recorder_count)
  return recorder_count_;
}
inline void RecorderInfo::set_recorder_count(::google::protobuf::int32 value) {
  
  recorder_count_ = value;
  // @@protoc_insertion_point(field_set:streamer.RecorderInfo.recorder_count)
}

// double recorder_duration = 6;
inline void RecorderInfo::clear_recorder_duration() {
  recorder_duration_ = 0;
}
inline double RecorderInfo::recorder_duration() const {
  // @@protoc_insertion_point(field_get:streamer.RecorderInfo.recorder_duration)
  return recorder_duration_;
}
inline void RecorderInfo::set_recorder_duration(double value) {
  
  recorder_duration_ = value;
  // @@protoc_insertion_point(field_set:streamer.RecorderInfo.recorder_duration)
}

// .streamer.RecorderInfo.RecorderState recorder_state = 7;
inline void RecorderInfo::clear_recorder_state() {
  recorder_state_ = 0;
}
inline ::streamer::RecorderInfo_RecorderState RecorderInfo::recorder_state() const {
  // @@protoc_insertion_point(field_get:streamer.RecorderInfo.recorder_state)
  return static_cast< ::streamer::RecorderInfo_RecorderState >(recorder_state_);
}
inline void RecorderInfo::set_recorder_state(::streamer::RecorderInfo_RecorderState value) {
  
  recorder_state_ = value;
  // @@protoc_insertion_point(field_set:streamer.RecorderInfo.recorder_state)
}

// double status_len = 8;
inline void RecorderInfo::clear_status_len() {
  status_len_ = 0;
}
inline double RecorderInfo::status_len() const {
  // @@protoc_insertion_point(field_get:streamer.RecorderInfo.status_len)
  return status_len_;
}
inline void RecorderInfo::set_status_len(double value) {
  
  status_len_ = value;
  // @@protoc_insertion_point(field_set:streamer.RecorderInfo.status_len)
}

// double status_error = 9;
inline void RecorderInfo::clear_status_error() {
  status_error_ = 0;
}
inline double RecorderInfo::status_error() const {
  // @@protoc_insertion_point(field_get:streamer.RecorderInfo.status_error)
  return status_error_;
}
inline void RecorderInfo::set_status_error(double value) {
  
  status_error_ = value;
  // @@protoc_insertion_point(field_set:streamer.RecorderInfo.status_error)
}

// double status_spike = 10;
inline void RecorderInfo::clear_status_spike() {
  status_spike_ = 0;
}
inline double RecorderInfo::status_spike() const {
  // @@protoc_insertion_point(field_get:streamer.RecorderInfo.status_spike)
  return status_spike_;
}
inline void RecorderInfo::set_status_spike(double value) {
  
  status_spike_ = value;
  // @@protoc_insertion_point(field_set:streamer.RecorderInfo.status_spike)
}

// int32 audio_sample_rate = 11;
inline void RecorderInfo::clear_audio_sample_rate() {
  audio_sample_rate_ = 0;
}
inline ::google::protobuf::int32 RecorderInfo::audio_sample_rate() const {
  // @@protoc_insertion_point(field_get:streamer.RecorderInfo.audio_sample_rate)
  return audio_sample_rate_;
}
inline void RecorderInfo::set_audio_sample_rate(::google::protobuf::int32 value) {
  
  audio_sample_rate_ = value;
  // @@protoc_insertion_point(field_set:streamer.RecorderInfo.audio_sample_rate)
}

// int32 audio_channels = 12;
inline void RecorderInfo::clear_audio_channels() {
  audio_channels_ = 0;
}
inline ::google::protobuf::int32 RecorderInfo::audio_channels() const {
  // @@protoc_insertion_point(field_get:streamer.RecorderInfo.audio_channels)
  return audio_channels_;
}
inline void RecorderInfo::set_audio_channels(::google::protobuf::int32 value) {
  
  audio_channels_ = value;
  // @@protoc_insertion_point(field_set:streamer.RecorderInfo.audio_channels)
}

// .streamer.RecorderInfo.AudioFormat audio_format = 13;
inline void RecorderInfo::clear_audio_format() {
  audio_format_ = 0;
}
inline ::streamer::RecorderInfo_AudioFormat RecorderInfo::audio_format() const {
  // @@protoc_insertion_point(field_get:streamer.RecorderInfo.audio_format)
  return static_cast< ::streamer::RecorderInfo_AudioFormat >(audio_format_);
}
inline void RecorderInfo::set_audio_format(::streamer::RecorderInfo_AudioFormat value) {
  
  audio_format_ = value;
  // @@protoc_insertion_point(field_set:streamer.RecorderInfo.audio_format)
}

// -------------------------------------------------------------------

// SourceInfo

// int32 source_num = 1;
inline void SourceInfo::clear_source_num() {
  source_num_ = 0;
}
inline ::google::protobuf::int32 SourceInfo::source_num() const {
  // @@protoc_insertion_point(field_get:streamer.SourceInfo.source_num)
  return source_num_;
}
inline void SourceInfo::set_source_num(::google::protobuf::int32 value) {
  
  source_num_ = value;
  // @@protoc_insertion_point(field_set:streamer.SourceInfo.source_num)
}

// double min_hz = 2;
inline void SourceInfo::clear_min_hz() {
  min_hz_ = 0;
}
inline double SourceInfo::min_hz() const {
  // @@protoc_insertion_point(field_get:streamer.SourceInfo.min_hz)
  return min_hz_;
}
inline void SourceInfo::set_min_hz(double value) {
  
  min_hz_ = value;
  // @@protoc_insertion_point(field_set:streamer.SourceInfo.min_hz)
}

// double max_hz = 3;
inline void SourceInfo::clear_max_hz() {
  max_hz_ = 0;
}
inline double SourceInfo::max_hz() const {
  // @@protoc_insertion_point(field_get:streamer.SourceInfo.max_hz)
  return max_hz_;
}
inline void SourceInfo::set_max_hz(double value) {
  
  max_hz_ = value;
  // @@protoc_insertion_point(field_set:streamer.SourceInfo.max_hz)
}

// double center_hz = 4;
inline void SourceInfo::clear_center_hz() {
  center_hz_ = 0;
}
inline double SourceInfo::center_hz() const {
  // @@protoc_insertion_point(field_get:streamer.SourceInfo.center_hz)
  return center_hz_;
}
inline void SourceInfo::set_center_hz(double value) {
  
  center_hz_ = value;
  // @@protoc_insertion_point(field_set:streamer.SourceInfo.center_hz)
}

// double rate = 5;
inline void SourceInfo::clear_rate() {
  rate_ = 0;
}
inline double SourceInfo::rate() const {
  // @@protoc_insertion_point(field_get:streamer.SourceInfo.rate)
  return rate_;
}
inline void SourceInfo::set_rate(double value) {
  
  rate_ = value;
  // @@protoc_insertion_point(field_set:streamer.SourceInfo.rate)
}

// string driver = 6;
inline void SourceInfo::clear_driver() {
  driver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceInfo::driver() const {
  // @@protoc_insertion_point(field_get:streamer.SourceInfo.driver)
  return driver_.GetNoArena();
}
inline void SourceInfo::set_driver(const ::std::string& value) {
  
  driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:streamer.SourceInfo.driver)
}
#if LANG_CXX11
inline void SourceInfo::set_driver(::std::string&& value) {
  
  driver_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:streamer.SourceInfo.driver)
}
#endif
inline void SourceInfo::set_driver(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:streamer.SourceInfo.driver)
}
inline void SourceInfo::set_driver(const char* value, size_t size) {
  
  driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:streamer.SourceInfo.driver)
}
inline ::std::string* SourceInfo::mutable_driver() {
  
  // @@protoc_insertion_point(field_mutable:streamer.SourceInfo.driver)
  return driver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceInfo::release_driver() {
  // @@protoc_insertion_point(field_release:streamer.SourceInfo.driver)
  
  return driver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceInfo::set_allocated_driver(::std::string* driver) {
  if (driver != NULL) {
    
  } else {
    
  }
  driver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver);
  // @@protoc_insertion_point(field_set_allocated:streamer.SourceInfo.driver)
}

// string device = 7;
inline void SourceInfo::clear_device() {
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceInfo::device() const {
  // @@protoc_insertion_point(field_get:streamer.SourceInfo.device)
  return device_.GetNoArena();
}
inline void SourceInfo::set_device(const ::std::string& value) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:streamer.SourceInfo.device)
}
#if LANG_CXX11
inline void SourceInfo::set_device(::std::string&& value) {
  
  device_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:streamer.SourceInfo.device)
}
#endif
inline void SourceInfo::set_device(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:streamer.SourceInfo.device)
}
inline void SourceInfo::set_device(const char* value, size_t size) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:streamer.SourceInfo.device)
}
inline ::std::string* SourceInfo::mutable_device() {
  
  // @@protoc_insertion_point(field_mutable:streamer.SourceInfo.device)
  return device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceInfo::release_device() {
  // @@protoc_insertion_point(field_release:streamer.SourceInfo.device)
  
  return device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceInfo::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    
  } else {
    
  }
  device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:streamer.SourceInfo.device)
}

// string antenna = 8;
inline void SourceInfo::clear_antenna() {
  antenna_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceInfo::antenna() const {
  // @@protoc_insertion_point(field_get:streamer.SourceInfo.antenna)
  return antenna_.GetNoArena();
}
inline void SourceInfo::set_antenna(const ::std::string& value) {
  
  antenna_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:streamer.SourceInfo.antenna)
}
#if LANG_CXX11
inline void SourceInfo::set_antenna(::std::string&& value) {
  
  antenna_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:streamer.SourceInfo.antenna)
}
#endif
inline void SourceInfo::set_antenna(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  antenna_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:streamer.SourceInfo.antenna)
}
inline void SourceInfo::set_antenna(const char* value, size_t size) {
  
  antenna_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:streamer.SourceInfo.antenna)
}
inline ::std::string* SourceInfo::mutable_antenna() {
  
  // @@protoc_insertion_point(field_mutable:streamer.SourceInfo.antenna)
  return antenna_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceInfo::release_antenna() {
  // @@protoc_insertion_point(field_release:streamer.SourceInfo.antenna)
  
  return antenna_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceInfo::set_allocated_antenna(::std::string* antenna) {
  if (antenna != NULL) {
    
  } else {
    
  }
  antenna_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), antenna);
  // @@protoc_insertion_point(field_set_allocated:streamer.SourceInfo.antenna)
}

// double error = 9;
inline void SourceInfo::clear_error() {
  error_ = 0;
}
inline double SourceInfo::error() const {
  // @@protoc_insertion_point(field_get:streamer.SourceInfo.error)
  return error_;
}
inline void SourceInfo::set_error(double value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:streamer.SourceInfo.error)
}

// int32 mix_gain = 10;
inline void SourceInfo::clear_mix_gain() {
  mix_gain_ = 0;
}
inline ::google::protobuf::int32 SourceInfo::mix_gain() const {
  // @@protoc_insertion_point(field_get:streamer.SourceInfo.mix_gain)
  return mix_gain_;
}
inline void SourceInfo::set_mix_gain(::google::protobuf::int32 value) {
  
  mix_gain_ = value;
  // @@protoc_insertion_point(field_set:streamer.SourceInfo.mix_gain)
}

// int32 lna_gain = 11;
inline void SourceInfo::clear_lna_gain() {
  lna_gain_ = 0;
}
inline ::google::protobuf::int32 SourceInfo::lna_gain() const {
  // @@protoc_insertion_point(field_get:streamer.SourceInfo.lna_gain)
  return lna_gain_;
}
inline void SourceInfo::set_lna_gain(::google::protobuf::int32 value) {
  
  lna_gain_ = value;
  // @@protoc_insertion_point(field_set:streamer.SourceInfo.lna_gain)
}

// int32 vga1_gain = 12;
inline void SourceInfo::clear_vga1_gain() {
  vga1_gain_ = 0;
}
inline ::google::protobuf::int32 SourceInfo::vga1_gain() const {
  // @@protoc_insertion_point(field_get:streamer.SourceInfo.vga1_gain)
  return vga1_gain_;
}
inline void SourceInfo::set_vga1_gain(::google::protobuf::int32 value) {
  
  vga1_gain_ = value;
  // @@protoc_insertion_point(field_set:streamer.SourceInfo.vga1_gain)
}

// int32 vga2_gain = 13;
inline void SourceInfo::clear_vga2_gain() {
  vga2_gain_ = 0;
}
inline ::google::protobuf::int32 SourceInfo::vga2_gain() const {
  // @@protoc_insertion_point(field_get:streamer.SourceInfo.vga2_gain)
  return vga2_gain_;
}
inline void SourceInfo::set_vga2_gain(::google::protobuf::int32 value) {
  
  vga2_gain_ = value;
  // @@protoc_insertion_point(field_set:streamer.SourceInfo.vga2_gain)
}

// int32 bb_gain = 14;
inline void SourceInfo::clear_bb_gain() {
  bb_gain_ = 0;
}
inline ::google::protobuf::int32 SourceInfo::bb_gain() const {
  // @@protoc_insertion_point(field_get:streamer.SourceInfo.bb_gain)
  return bb_gain_;
}
inline void SourceInfo::set_bb_gain(::google::protobuf::int32 value) {
  
  bb_gain_ = value;
  // @@protoc_insertion_point(field_set:streamer.SourceInfo.bb_gain)
}

// int32 gain = 15;
inline void SourceInfo::clear_gain() {
  gain_ = 0;
}
inline ::google::protobuf::int32 SourceInfo::gain() const {
  // @@protoc_insertion_point(field_get:streamer.SourceInfo.gain)
  return gain_;
}
inline void SourceInfo::set_gain(::google::protobuf::int32 value) {
  
  gain_ = value;
  // @@protoc_insertion_point(field_set:streamer.SourceInfo.gain)
}

// int32 if_gain = 16;
inline void SourceInfo::clear_if_gain() {
  if_gain_ = 0;
}
inline ::google::protobuf::int32 SourceInfo::if_gain() const {
  // @@protoc_insertion_point(field_get:streamer.SourceInfo.if_gain)
  return if_gain_;
}
inline void SourceInfo::set_if_gain(::google::protobuf::int32 value) {
  
  if_gain_ = value;
  // @@protoc_insertion_point(field_set:streamer.SourceInfo.if_gain)
}

// int32 analog_recorders = 17;
inline void SourceInfo::clear_analog_recorders() {
  analog_recorders_ = 0;
}
inline ::google::protobuf::int32 SourceInfo::analog_recorders() const {
  // @@protoc_insertion_point(field_get:streamer.SourceInfo.analog_recorders)
  return analog_recorders_;
}
inline void SourceInfo::set_analog_recorders(::google::protobuf::int32 value) {
  
  analog_recorders_ = value;
  // @@protoc_insertion_point(field_set:streamer.SourceInfo.analog_recorders)
}

// int32 digital_recorders = 18;
inline void SourceInfo::clear_digital_recorders() {
  digital_recorders_ = 0;
}
inline ::google::protobuf::int32 SourceInfo::digital_recorders() const {
  // @@protoc_insertion_point(field_get:streamer.SourceInfo.digital_recorders)
  return digital_recorders_;
}
inline void SourceInfo::set_digital_recorders(::google::protobuf::int32 value) {
  
  digital_recorders_ = value;
  // @@protoc_insertion_point(field_set:streamer.SourceInfo.digital_recorders)
}

// int32 debug_recorders = 19;
inline void SourceInfo::clear_debug_recorders() {
  debug_recorders_ = 0;
}
inline ::google::protobuf::int32 SourceInfo::debug_recorders() const {
  // @@protoc_insertion_point(field_get:streamer.SourceInfo.debug_recorders)
  return debug_recorders_;
}
inline void SourceInfo::set_debug_recorders(::google::protobuf::int32 value) {
  
  debug_recorders_ = value;
  // @@protoc_insertion_point(field_set:streamer.SourceInfo.debug_recorders)
}

// int32 sigmf_recorders = 20;
inline void SourceInfo::clear_sigmf_recorders() {
  sigmf_recorders_ = 0;
}
inline ::google::protobuf::int32 SourceInfo::sigmf_recorders() const {
  // @@protoc_insertion_point(field_get:streamer.SourceInfo.sigmf_recorders)
  return sigmf_recorders_;
}
inline void SourceInfo::set_sigmf_recorders(::google::protobuf::int32 value) {
  
  sigmf_recorders_ = value;
  // @@protoc_insertion_point(field_set:streamer.SourceInfo.sigmf_recorders)
}

// -------------------------------------------------------------------

// SystemInfo

// int32 system_num = 1;
inline void SystemInfo::clear_system_num() {
  system_num_ = 0;
}
inline ::google::protobuf::int32 SystemInfo::system_num() const {
  // @@protoc_insertion_point(field_get:streamer.SystemInfo.system_num)
  return system_num_;
}
inline void SystemInfo::set_system_num(::google::protobuf::int32 value) {
  
  system_num_ = value;
  // @@protoc_insertion_point(field_set:streamer.SystemInfo.system_num)
}

// string system_type = 2;
inline void SystemInfo::clear_system_type() {
  system_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemInfo::system_type() const {
  // @@protoc_insertion_point(field_get:streamer.SystemInfo.system_type)
  return system_type_.GetNoArena();
}
inline void SystemInfo::set_system_type(const ::std::string& value) {
  
  system_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:streamer.SystemInfo.system_type)
}
#if LANG_CXX11
inline void SystemInfo::set_system_type(::std::string&& value) {
  
  system_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:streamer.SystemInfo.system_type)
}
#endif
inline void SystemInfo::set_system_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  system_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:streamer.SystemInfo.system_type)
}
inline void SystemInfo::set_system_type(const char* value, size_t size) {
  
  system_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:streamer.SystemInfo.system_type)
}
inline ::std::string* SystemInfo::mutable_system_type() {
  
  // @@protoc_insertion_point(field_mutable:streamer.SystemInfo.system_type)
  return system_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemInfo::release_system_type() {
  // @@protoc_insertion_point(field_release:streamer.SystemInfo.system_type)
  
  return system_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemInfo::set_allocated_system_type(::std::string* system_type) {
  if (system_type != NULL) {
    
  } else {
    
  }
  system_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), system_type);
  // @@protoc_insertion_point(field_set_allocated:streamer.SystemInfo.system_type)
}

// string system_name = 3;
inline void SystemInfo::clear_system_name() {
  system_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemInfo::system_name() const {
  // @@protoc_insertion_point(field_get:streamer.SystemInfo.system_name)
  return system_name_.GetNoArena();
}
inline void SystemInfo::set_system_name(const ::std::string& value) {
  
  system_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:streamer.SystemInfo.system_name)
}
#if LANG_CXX11
inline void SystemInfo::set_system_name(::std::string&& value) {
  
  system_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:streamer.SystemInfo.system_name)
}
#endif
inline void SystemInfo::set_system_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  system_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:streamer.SystemInfo.system_name)
}
inline void SystemInfo::set_system_name(const char* value, size_t size) {
  
  system_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:streamer.SystemInfo.system_name)
}
inline ::std::string* SystemInfo::mutable_system_name() {
  
  // @@protoc_insertion_point(field_mutable:streamer.SystemInfo.system_name)
  return system_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemInfo::release_system_name() {
  // @@protoc_insertion_point(field_release:streamer.SystemInfo.system_name)
  
  return system_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemInfo::set_allocated_system_name(::std::string* system_name) {
  if (system_name != NULL) {
    
  } else {
    
  }
  system_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), system_name);
  // @@protoc_insertion_point(field_set_allocated:streamer.SystemInfo.system_name)
}

// bool audio_archive = 4;
inline void SystemInfo::clear_audio_archive() {
  audio_archive_ = false;
}
inline bool SystemInfo::audio_archive() const {
  // @@protoc_insertion_point(field_get:streamer.SystemInfo.audio_archive)
  return audio_archive_;
}
inline void SystemInfo::set_audio_archive(bool value) {
  
  audio_archive_ = value;
  // @@protoc_insertion_point(field_set:streamer.SystemInfo.audio_archive)
}

// string upload_script = 5;
inline void SystemInfo::clear_upload_script() {
  upload_script_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemInfo::upload_script() const {
  // @@protoc_insertion_point(field_get:streamer.SystemInfo.upload_script)
  return upload_script_.GetNoArena();
}
inline void SystemInfo::set_upload_script(const ::std::string& value) {
  
  upload_script_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:streamer.SystemInfo.upload_script)
}
#if LANG_CXX11
inline void SystemInfo::set_upload_script(::std::string&& value) {
  
  upload_script_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:streamer.SystemInfo.upload_script)
}
#endif
inline void SystemInfo::set_upload_script(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  upload_script_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:streamer.SystemInfo.upload_script)
}
inline void SystemInfo::set_upload_script(const char* value, size_t size) {
  
  upload_script_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:streamer.SystemInfo.upload_script)
}
inline ::std::string* SystemInfo::mutable_upload_script() {
  
  // @@protoc_insertion_point(field_mutable:streamer.SystemInfo.upload_script)
  return upload_script_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemInfo::release_upload_script() {
  // @@protoc_insertion_point(field_release:streamer.SystemInfo.upload_script)
  
  return upload_script_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemInfo::set_allocated_upload_script(::std::string* upload_script) {
  if (upload_script != NULL) {
    
  } else {
    
  }
  upload_script_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upload_script);
  // @@protoc_insertion_point(field_set_allocated:streamer.SystemInfo.upload_script)
}

// bool record_unknown = 6;
inline void SystemInfo::clear_record_unknown() {
  record_unknown_ = false;
}
inline bool SystemInfo::record_unknown() const {
  // @@protoc_insertion_point(field_get:streamer.SystemInfo.record_unknown)
  return record_unknown_;
}
inline void SystemInfo::set_record_unknown(bool value) {
  
  record_unknown_ = value;
  // @@protoc_insertion_point(field_set:streamer.SystemInfo.record_unknown)
}

// bool call_log = 7;
inline void SystemInfo::clear_call_log() {
  call_log_ = false;
}
inline bool SystemInfo::call_log() const {
  // @@protoc_insertion_point(field_get:streamer.SystemInfo.call_log)
  return call_log_;
}
inline void SystemInfo::set_call_log(bool value) {
  
  call_log_ = value;
  // @@protoc_insertion_point(field_set:streamer.SystemInfo.call_log)
}

// string talkgroups_file = 8;
inline void SystemInfo::clear_talkgroups_file() {
  talkgroups_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemInfo::talkgroups_file() const {
  // @@protoc_insertion_point(field_get:streamer.SystemInfo.talkgroups_file)
  return talkgroups_file_.GetNoArena();
}
inline void SystemInfo::set_talkgroups_file(const ::std::string& value) {
  
  talkgroups_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:streamer.SystemInfo.talkgroups_file)
}
#if LANG_CXX11
inline void SystemInfo::set_talkgroups_file(::std::string&& value) {
  
  talkgroups_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:streamer.SystemInfo.talkgroups_file)
}
#endif
inline void SystemInfo::set_talkgroups_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  talkgroups_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:streamer.SystemInfo.talkgroups_file)
}
inline void SystemInfo::set_talkgroups_file(const char* value, size_t size) {
  
  talkgroups_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:streamer.SystemInfo.talkgroups_file)
}
inline ::std::string* SystemInfo::mutable_talkgroups_file() {
  
  // @@protoc_insertion_point(field_mutable:streamer.SystemInfo.talkgroups_file)
  return talkgroups_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemInfo::release_talkgroups_file() {
  // @@protoc_insertion_point(field_release:streamer.SystemInfo.talkgroups_file)
  
  return talkgroups_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemInfo::set_allocated_talkgroups_file(::std::string* talkgroups_file) {
  if (talkgroups_file != NULL) {
    
  } else {
    
  }
  talkgroups_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), talkgroups_file);
  // @@protoc_insertion_point(field_set_allocated:streamer.SystemInfo.talkgroups_file)
}

// double analog_levels = 9;
inline void SystemInfo::clear_analog_levels() {
  analog_levels_ = 0;
}
inline double SystemInfo::analog_levels() const {
  // @@protoc_insertion_point(field_get:streamer.SystemInfo.analog_levels)
  return analog_levels_;
}
inline void SystemInfo::set_analog_levels(double value) {
  
  analog_levels_ = value;
  // @@protoc_insertion_point(field_set:streamer.SystemInfo.analog_levels)
}

// double digital_levels = 10;
inline void SystemInfo::clear_digital_levels() {
  digital_levels_ = 0;
}
inline double SystemInfo::digital_levels() const {
  // @@protoc_insertion_point(field_get:streamer.SystemInfo.digital_levels)
  return digital_levels_;
}
inline void SystemInfo::set_digital_levels(double value) {
  
  digital_levels_ = value;
  // @@protoc_insertion_point(field_set:streamer.SystemInfo.digital_levels)
}

// bool qpsk = 11;
inline void SystemInfo::clear_qpsk() {
  qpsk_ = false;
}
inline bool SystemInfo::qpsk() const {
  // @@protoc_insertion_point(field_get:streamer.SystemInfo.qpsk)
  return qpsk_;
}
inline void SystemInfo::set_qpsk(bool value) {
  
  qpsk_ = value;
  // @@protoc_insertion_point(field_set:streamer.SystemInfo.qpsk)
}

// double squelch_db = 12;
inline void SystemInfo::clear_squelch_db() {
  squelch_db_ = 0;
}
inline double SystemInfo::squelch_db() const {
  // @@protoc_insertion_point(field_get:streamer.SystemInfo.squelch_db)
  return squelch_db_;
}
inline void SystemInfo::set_squelch_db(double value) {
  
  squelch_db_ = value;
  // @@protoc_insertion_point(field_set:streamer.SystemInfo.squelch_db)
}

// repeated double channels = 13;
inline int SystemInfo::channels_size() const {
  return channels_.size();
}
inline void SystemInfo::clear_channels() {
  channels_.Clear();
}
inline double SystemInfo::channels(int index) const {
  // @@protoc_insertion_point(field_get:streamer.SystemInfo.channels)
  return channels_.Get(index);
}
inline void SystemInfo::set_channels(int index, double value) {
  channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:streamer.SystemInfo.channels)
}
inline void SystemInfo::add_channels(double value) {
  channels_.Add(value);
  // @@protoc_insertion_point(field_add:streamer.SystemInfo.channels)
}
inline const ::google::protobuf::RepeatedField< double >&
SystemInfo::channels() const {
  // @@protoc_insertion_point(field_list:streamer.SystemInfo.channels)
  return channels_;
}
inline ::google::protobuf::RepeatedField< double >*
SystemInfo::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:streamer.SystemInfo.channels)
  return &channels_;
}

// string bandplan = 14;
inline void SystemInfo::clear_bandplan() {
  bandplan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemInfo::bandplan() const {
  // @@protoc_insertion_point(field_get:streamer.SystemInfo.bandplan)
  return bandplan_.GetNoArena();
}
inline void SystemInfo::set_bandplan(const ::std::string& value) {
  
  bandplan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:streamer.SystemInfo.bandplan)
}
#if LANG_CXX11
inline void SystemInfo::set_bandplan(::std::string&& value) {
  
  bandplan_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:streamer.SystemInfo.bandplan)
}
#endif
inline void SystemInfo::set_bandplan(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bandplan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:streamer.SystemInfo.bandplan)
}
inline void SystemInfo::set_bandplan(const char* value, size_t size) {
  
  bandplan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:streamer.SystemInfo.bandplan)
}
inline ::std::string* SystemInfo::mutable_bandplan() {
  
  // @@protoc_insertion_point(field_mutable:streamer.SystemInfo.bandplan)
  return bandplan_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemInfo::release_bandplan() {
  // @@protoc_insertion_point(field_release:streamer.SystemInfo.bandplan)
  
  return bandplan_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemInfo::set_allocated_bandplan(::std::string* bandplan) {
  if (bandplan != NULL) {
    
  } else {
    
  }
  bandplan_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bandplan);
  // @@protoc_insertion_point(field_set_allocated:streamer.SystemInfo.bandplan)
}

// int32 bandfreq = 15;
inline void SystemInfo::clear_bandfreq() {
  bandfreq_ = 0;
}
inline ::google::protobuf::int32 SystemInfo::bandfreq() const {
  // @@protoc_insertion_point(field_get:streamer.SystemInfo.bandfreq)
  return bandfreq_;
}
inline void SystemInfo::set_bandfreq(::google::protobuf::int32 value) {
  
  bandfreq_ = value;
  // @@protoc_insertion_point(field_set:streamer.SystemInfo.bandfreq)
}

// double bandplan_base = 16;
inline void SystemInfo::clear_bandplan_base() {
  bandplan_base_ = 0;
}
inline double SystemInfo::bandplan_base() const {
  // @@protoc_insertion_point(field_get:streamer.SystemInfo.bandplan_base)
  return bandplan_base_;
}
inline void SystemInfo::set_bandplan_base(double value) {
  
  bandplan_base_ = value;
  // @@protoc_insertion_point(field_set:streamer.SystemInfo.bandplan_base)
}

// double bandplan_high = 17;
inline void SystemInfo::clear_bandplan_high() {
  bandplan_high_ = 0;
}
inline double SystemInfo::bandplan_high() const {
  // @@protoc_insertion_point(field_get:streamer.SystemInfo.bandplan_high)
  return bandplan_high_;
}
inline void SystemInfo::set_bandplan_high(double value) {
  
  bandplan_high_ = value;
  // @@protoc_insertion_point(field_set:streamer.SystemInfo.bandplan_high)
}

// double bandplan_spacing = 18;
inline void SystemInfo::clear_bandplan_spacing() {
  bandplan_spacing_ = 0;
}
inline double SystemInfo::bandplan_spacing() const {
  // @@protoc_insertion_point(field_get:streamer.SystemInfo.bandplan_spacing)
  return bandplan_spacing_;
}
inline void SystemInfo::set_bandplan_spacing(double value) {
  
  bandplan_spacing_ = value;
  // @@protoc_insertion_point(field_set:streamer.SystemInfo.bandplan_spacing)
}

// int32 bandplan_offset = 19;
inline void SystemInfo::clear_bandplan_offset() {
  bandplan_offset_ = 0;
}
inline ::google::protobuf::int32 SystemInfo::bandplan_offset() const {
  // @@protoc_insertion_point(field_get:streamer.SystemInfo.bandplan_offset)
  return bandplan_offset_;
}
inline void SystemInfo::set_bandplan_offset(::google::protobuf::int32 value) {
  
  bandplan_offset_ = value;
  // @@protoc_insertion_point(field_set:streamer.SystemInfo.bandplan_offset)
}

// -------------------------------------------------------------------

// ConfigInfo

// repeated .streamer.SourceInfo sources = 1;
inline int ConfigInfo::sources_size() const {
  return sources_.size();
}
inline void ConfigInfo::clear_sources() {
  sources_.Clear();
}
inline ::streamer::SourceInfo* ConfigInfo::mutable_sources(int index) {
  // @@protoc_insertion_point(field_mutable:streamer.ConfigInfo.sources)
  return sources_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::streamer::SourceInfo >*
ConfigInfo::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_list:streamer.ConfigInfo.sources)
  return &sources_;
}
inline const ::streamer::SourceInfo& ConfigInfo::sources(int index) const {
  // @@protoc_insertion_point(field_get:streamer.ConfigInfo.sources)
  return sources_.Get(index);
}
inline ::streamer::SourceInfo* ConfigInfo::add_sources() {
  // @@protoc_insertion_point(field_add:streamer.ConfigInfo.sources)
  return sources_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::streamer::SourceInfo >&
ConfigInfo::sources() const {
  // @@protoc_insertion_point(field_list:streamer.ConfigInfo.sources)
  return sources_;
}

// repeated .streamer.SystemInfo systems = 2;
inline int ConfigInfo::systems_size() const {
  return systems_.size();
}
inline void ConfigInfo::clear_systems() {
  systems_.Clear();
}
inline ::streamer::SystemInfo* ConfigInfo::mutable_systems(int index) {
  // @@protoc_insertion_point(field_mutable:streamer.ConfigInfo.systems)
  return systems_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::streamer::SystemInfo >*
ConfigInfo::mutable_systems() {
  // @@protoc_insertion_point(field_mutable_list:streamer.ConfigInfo.systems)
  return &systems_;
}
inline const ::streamer::SystemInfo& ConfigInfo::systems(int index) const {
  // @@protoc_insertion_point(field_get:streamer.ConfigInfo.systems)
  return systems_.Get(index);
}
inline ::streamer::SystemInfo* ConfigInfo::add_systems() {
  // @@protoc_insertion_point(field_add:streamer.ConfigInfo.systems)
  return systems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::streamer::SystemInfo >&
ConfigInfo::systems() const {
  // @@protoc_insertion_point(field_list:streamer.ConfigInfo.systems)
  return systems_;
}

// string capture_dir = 3;
inline void ConfigInfo::clear_capture_dir() {
  capture_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigInfo::capture_dir() const {
  // @@protoc_insertion_point(field_get:streamer.ConfigInfo.capture_dir)
  return capture_dir_.GetNoArena();
}
inline void ConfigInfo::set_capture_dir(const ::std::string& value) {
  
  capture_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:streamer.ConfigInfo.capture_dir)
}
#if LANG_CXX11
inline void ConfigInfo::set_capture_dir(::std::string&& value) {
  
  capture_dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:streamer.ConfigInfo.capture_dir)
}
#endif
inline void ConfigInfo::set_capture_dir(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  capture_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:streamer.ConfigInfo.capture_dir)
}
inline void ConfigInfo::set_capture_dir(const char* value, size_t size) {
  
  capture_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:streamer.ConfigInfo.capture_dir)
}
inline ::std::string* ConfigInfo::mutable_capture_dir() {
  
  // @@protoc_insertion_point(field_mutable:streamer.ConfigInfo.capture_dir)
  return capture_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigInfo::release_capture_dir() {
  // @@protoc_insertion_point(field_release:streamer.ConfigInfo.capture_dir)
  
  return capture_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigInfo::set_allocated_capture_dir(::std::string* capture_dir) {
  if (capture_dir != NULL) {
    
  } else {
    
  }
  capture_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), capture_dir);
  // @@protoc_insertion_point(field_set_allocated:streamer.ConfigInfo.capture_dir)
}

// string upload_server = 4;
inline void ConfigInfo::clear_upload_server() {
  upload_server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigInfo::upload_server() const {
  // @@protoc_insertion_point(field_get:streamer.ConfigInfo.upload_server)
  return upload_server_.GetNoArena();
}
inline void ConfigInfo::set_upload_server(const ::std::string& value) {
  
  upload_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:streamer.ConfigInfo.upload_server)
}
#if LANG_CXX11
inline void ConfigInfo::set_upload_server(::std::string&& value) {
  
  upload_server_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:streamer.ConfigInfo.upload_server)
}
#endif
inline void ConfigInfo::set_upload_server(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  upload_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:streamer.ConfigInfo.upload_server)
}
inline void ConfigInfo::set_upload_server(const char* value, size_t size) {
  
  upload_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:streamer.ConfigInfo.upload_server)
}
inline ::std::string* ConfigInfo::mutable_upload_server() {
  
  // @@protoc_insertion_point(field_mutable:streamer.ConfigInfo.upload_server)
  return upload_server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigInfo::release_upload_server() {
  // @@protoc_insertion_point(field_release:streamer.ConfigInfo.upload_server)
  
  return upload_server_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigInfo::set_allocated_upload_server(::std::string* upload_server) {
  if (upload_server != NULL) {
    
  } else {
    
  }
  upload_server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upload_server);
  // @@protoc_insertion_point(field_set_allocated:streamer.ConfigInfo.upload_server)
}

// int32 call_timeout = 5;
inline void ConfigInfo::clear_call_timeout() {
  call_timeout_ = 0;
}
inline ::google::protobuf::int32 ConfigInfo::call_timeout() const {
  // @@protoc_insertion_point(field_get:streamer.ConfigInfo.call_timeout)
  return call_timeout_;
}
inline void ConfigInfo::set_call_timeout(::google::protobuf::int32 value) {
  
  call_timeout_ = value;
  // @@protoc_insertion_point(field_set:streamer.ConfigInfo.call_timeout)
}

// bool log_file = 6;
inline void ConfigInfo::clear_log_file() {
  log_file_ = false;
}
inline bool ConfigInfo::log_file() const {
  // @@protoc_insertion_point(field_get:streamer.ConfigInfo.log_file)
  return log_file_;
}
inline void ConfigInfo::set_log_file(bool value) {
  
  log_file_ = value;
  // @@protoc_insertion_point(field_set:streamer.ConfigInfo.log_file)
}

// string instance_id = 7;
inline void ConfigInfo::clear_instance_id() {
  instance_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigInfo::instance_id() const {
  // @@protoc_insertion_point(field_get:streamer.ConfigInfo.instance_id)
  return instance_id_.GetNoArena();
}
inline void ConfigInfo::set_instance_id(const ::std::string& value) {
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:streamer.ConfigInfo.instance_id)
}
#if LANG_CXX11
inline void ConfigInfo::set_instance_id(::std::string&& value) {
  
  instance_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:streamer.ConfigInfo.instance_id)
}
#endif
inline void ConfigInfo::set_instance_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:streamer.ConfigInfo.instance_id)
}
inline void ConfigInfo::set_instance_id(const char* value, size_t size) {
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:streamer.ConfigInfo.instance_id)
}
inline ::std::string* ConfigInfo::mutable_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:streamer.ConfigInfo.instance_id)
  return instance_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigInfo::release_instance_id() {
  // @@protoc_insertion_point(field_release:streamer.ConfigInfo.instance_id)
  
  return instance_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigInfo::set_allocated_instance_id(::std::string* instance_id) {
  if (instance_id != NULL) {
    
  } else {
    
  }
  instance_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_id);
  // @@protoc_insertion_point(field_set_allocated:streamer.ConfigInfo.instance_id)
}

// string instance_key = 8;
inline void ConfigInfo::clear_instance_key() {
  instance_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigInfo::instance_key() const {
  // @@protoc_insertion_point(field_get:streamer.ConfigInfo.instance_key)
  return instance_key_.GetNoArena();
}
inline void ConfigInfo::set_instance_key(const ::std::string& value) {
  
  instance_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:streamer.ConfigInfo.instance_key)
}
#if LANG_CXX11
inline void ConfigInfo::set_instance_key(::std::string&& value) {
  
  instance_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:streamer.ConfigInfo.instance_key)
}
#endif
inline void ConfigInfo::set_instance_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instance_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:streamer.ConfigInfo.instance_key)
}
inline void ConfigInfo::set_instance_key(const char* value, size_t size) {
  
  instance_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:streamer.ConfigInfo.instance_key)
}
inline ::std::string* ConfigInfo::mutable_instance_key() {
  
  // @@protoc_insertion_point(field_mutable:streamer.ConfigInfo.instance_key)
  return instance_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigInfo::release_instance_key() {
  // @@protoc_insertion_point(field_release:streamer.ConfigInfo.instance_key)
  
  return instance_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigInfo::set_allocated_instance_key(::std::string* instance_key) {
  if (instance_key != NULL) {
    
  } else {
    
  }
  instance_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_key);
  // @@protoc_insertion_point(field_set_allocated:streamer.ConfigInfo.instance_key)
}

// bool broadcast_signals = 9;
inline void ConfigInfo::clear_broadcast_signals() {
  broadcast_signals_ = false;
}
inline bool ConfigInfo::broadcast_signals() const {
  // @@protoc_insertion_point(field_get:streamer.ConfigInfo.broadcast_signals)
  return broadcast_signals_;
}
inline void ConfigInfo::set_broadcast_signals(bool value) {
  
  broadcast_signals_ = value;
  // @@protoc_insertion_point(field_set:streamer.ConfigInfo.broadcast_signals)
}

// -------------------------------------------------------------------

// CallInfo

// bool call_active = 1;
inline void CallInfo::clear_call_active() {
  call_active_ = false;
}
inline bool CallInfo::call_active() const {
  // @@protoc_insertion_point(field_get:streamer.CallInfo.call_active)
  return call_active_;
}
inline void CallInfo::set_call_active(bool value) {
  
  call_active_ = value;
  // @@protoc_insertion_point(field_set:streamer.CallInfo.call_active)
}

// int32 recorder_num = 2;
inline void CallInfo::clear_recorder_num() {
  recorder_num_ = 0;
}
inline ::google::protobuf::int32 CallInfo::recorder_num() const {
  // @@protoc_insertion_point(field_get:streamer.CallInfo.recorder_num)
  return recorder_num_;
}
inline void CallInfo::set_recorder_num(::google::protobuf::int32 value) {
  
  recorder_num_ = value;
  // @@protoc_insertion_point(field_set:streamer.CallInfo.recorder_num)
}

// int32 system_num = 3;
inline void CallInfo::clear_system_num() {
  system_num_ = 0;
}
inline ::google::protobuf::int32 CallInfo::system_num() const {
  // @@protoc_insertion_point(field_get:streamer.CallInfo.system_num)
  return system_num_;
}
inline void CallInfo::set_system_num(::google::protobuf::int32 value) {
  
  system_num_ = value;
  // @@protoc_insertion_point(field_set:streamer.CallInfo.system_num)
}

// double curr_freq = 4;
inline void CallInfo::clear_curr_freq() {
  curr_freq_ = 0;
}
inline double CallInfo::curr_freq() const {
  // @@protoc_insertion_point(field_get:streamer.CallInfo.curr_freq)
  return curr_freq_;
}
inline void CallInfo::set_curr_freq(double value) {
  
  curr_freq_ = value;
  // @@protoc_insertion_point(field_set:streamer.CallInfo.curr_freq)
}

// -------------------------------------------------------------------

// SignalInfo

// int64 unit_id = 1;
inline void SignalInfo::clear_unit_id() {
  unit_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SignalInfo::unit_id() const {
  // @@protoc_insertion_point(field_get:streamer.SignalInfo.unit_id)
  return unit_id_;
}
inline void SignalInfo::set_unit_id(::google::protobuf::int64 value) {
  
  unit_id_ = value;
  // @@protoc_insertion_point(field_set:streamer.SignalInfo.unit_id)
}

// string signaling_type = 2;
inline void SignalInfo::clear_signaling_type() {
  signaling_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalInfo::signaling_type() const {
  // @@protoc_insertion_point(field_get:streamer.SignalInfo.signaling_type)
  return signaling_type_.GetNoArena();
}
inline void SignalInfo::set_signaling_type(const ::std::string& value) {
  
  signaling_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:streamer.SignalInfo.signaling_type)
}
#if LANG_CXX11
inline void SignalInfo::set_signaling_type(::std::string&& value) {
  
  signaling_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:streamer.SignalInfo.signaling_type)
}
#endif
inline void SignalInfo::set_signaling_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signaling_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:streamer.SignalInfo.signaling_type)
}
inline void SignalInfo::set_signaling_type(const char* value, size_t size) {
  
  signaling_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:streamer.SignalInfo.signaling_type)
}
inline ::std::string* SignalInfo::mutable_signaling_type() {
  
  // @@protoc_insertion_point(field_mutable:streamer.SignalInfo.signaling_type)
  return signaling_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalInfo::release_signaling_type() {
  // @@protoc_insertion_point(field_release:streamer.SignalInfo.signaling_type)
  
  return signaling_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalInfo::set_allocated_signaling_type(::std::string* signaling_type) {
  if (signaling_type != NULL) {
    
  } else {
    
  }
  signaling_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signaling_type);
  // @@protoc_insertion_point(field_set_allocated:streamer.SignalInfo.signaling_type)
}

// .streamer.SignalInfo.SignalType signal_type = 3;
inline void SignalInfo::clear_signal_type() {
  signal_type_ = 0;
}
inline ::streamer::SignalInfo_SignalType SignalInfo::signal_type() const {
  // @@protoc_insertion_point(field_get:streamer.SignalInfo.signal_type)
  return static_cast< ::streamer::SignalInfo_SignalType >(signal_type_);
}
inline void SignalInfo::set_signal_type(::streamer::SignalInfo_SignalType value) {
  
  signal_type_ = value;
  // @@protoc_insertion_point(field_set:streamer.SignalInfo.signal_type)
}

// .streamer.CallInfo call_info = 4;
inline bool SignalInfo::has_call_info() const {
  return this != internal_default_instance() && call_info_ != NULL;
}
inline void SignalInfo::clear_call_info() {
  if (GetArenaNoVirtual() == NULL && call_info_ != NULL) {
    delete call_info_;
  }
  call_info_ = NULL;
}
inline const ::streamer::CallInfo& SignalInfo::_internal_call_info() const {
  return *call_info_;
}
inline const ::streamer::CallInfo& SignalInfo::call_info() const {
  const ::streamer::CallInfo* p = call_info_;
  // @@protoc_insertion_point(field_get:streamer.SignalInfo.call_info)
  return p != NULL ? *p : *reinterpret_cast<const ::streamer::CallInfo*>(
      &::streamer::_CallInfo_default_instance_);
}
inline ::streamer::CallInfo* SignalInfo::release_call_info() {
  // @@protoc_insertion_point(field_release:streamer.SignalInfo.call_info)
  
  ::streamer::CallInfo* temp = call_info_;
  call_info_ = NULL;
  return temp;
}
inline ::streamer::CallInfo* SignalInfo::mutable_call_info() {
  
  if (call_info_ == NULL) {
    auto* p = CreateMaybeMessage<::streamer::CallInfo>(GetArenaNoVirtual());
    call_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:streamer.SignalInfo.call_info)
  return call_info_;
}
inline void SignalInfo::set_allocated_call_info(::streamer::CallInfo* call_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete call_info_;
  }
  if (call_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      call_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, call_info, submessage_arena);
    }
    
  } else {
    
  }
  call_info_ = call_info;
  // @@protoc_insertion_point(field_set_allocated:streamer.SignalInfo.call_info)
}

// .streamer.SystemInfo system_info = 5;
inline bool SignalInfo::has_system_info() const {
  return this != internal_default_instance() && system_info_ != NULL;
}
inline void SignalInfo::clear_system_info() {
  if (GetArenaNoVirtual() == NULL && system_info_ != NULL) {
    delete system_info_;
  }
  system_info_ = NULL;
}
inline const ::streamer::SystemInfo& SignalInfo::_internal_system_info() const {
  return *system_info_;
}
inline const ::streamer::SystemInfo& SignalInfo::system_info() const {
  const ::streamer::SystemInfo* p = system_info_;
  // @@protoc_insertion_point(field_get:streamer.SignalInfo.system_info)
  return p != NULL ? *p : *reinterpret_cast<const ::streamer::SystemInfo*>(
      &::streamer::_SystemInfo_default_instance_);
}
inline ::streamer::SystemInfo* SignalInfo::release_system_info() {
  // @@protoc_insertion_point(field_release:streamer.SignalInfo.system_info)
  
  ::streamer::SystemInfo* temp = system_info_;
  system_info_ = NULL;
  return temp;
}
inline ::streamer::SystemInfo* SignalInfo::mutable_system_info() {
  
  if (system_info_ == NULL) {
    auto* p = CreateMaybeMessage<::streamer::SystemInfo>(GetArenaNoVirtual());
    system_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:streamer.SignalInfo.system_info)
  return system_info_;
}
inline void SignalInfo::set_allocated_system_info(::streamer::SystemInfo* system_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete system_info_;
  }
  if (system_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      system_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, system_info, submessage_arena);
    }
    
  } else {
    
  }
  system_info_ = system_info;
  // @@protoc_insertion_point(field_set_allocated:streamer.SignalInfo.system_info)
}

// .streamer.RecorderInfo recorder_info = 6;
inline bool SignalInfo::has_recorder_info() const {
  return this != internal_default_instance() && recorder_info_ != NULL;
}
inline void SignalInfo::clear_recorder_info() {
  if (GetArenaNoVirtual() == NULL && recorder_info_ != NULL) {
    delete recorder_info_;
  }
  recorder_info_ = NULL;
}
inline const ::streamer::RecorderInfo& SignalInfo::_internal_recorder_info() const {
  return *recorder_info_;
}
inline const ::streamer::RecorderInfo& SignalInfo::recorder_info() const {
  const ::streamer::RecorderInfo* p = recorder_info_;
  // @@protoc_insertion_point(field_get:streamer.SignalInfo.recorder_info)
  return p != NULL ? *p : *reinterpret_cast<const ::streamer::RecorderInfo*>(
      &::streamer::_RecorderInfo_default_instance_);
}
inline ::streamer::RecorderInfo* SignalInfo::release_recorder_info() {
  // @@protoc_insertion_point(field_release:streamer.SignalInfo.recorder_info)
  
  ::streamer::RecorderInfo* temp = recorder_info_;
  recorder_info_ = NULL;
  return temp;
}
inline ::streamer::RecorderInfo* SignalInfo::mutable_recorder_info() {
  
  if (recorder_info_ == NULL) {
    auto* p = CreateMaybeMessage<::streamer::RecorderInfo>(GetArenaNoVirtual());
    recorder_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:streamer.SignalInfo.recorder_info)
  return recorder_info_;
}
inline void SignalInfo::set_allocated_recorder_info(::streamer::RecorderInfo* recorder_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete recorder_info_;
  }
  if (recorder_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      recorder_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, recorder_info, submessage_arena);
    }
    
  } else {
    
  }
  recorder_info_ = recorder_info;
  // @@protoc_insertion_point(field_set_allocated:streamer.SignalInfo.recorder_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace streamer

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::streamer::RecorderInfo_RecorderState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::streamer::RecorderInfo_RecorderState>() {
  return ::streamer::RecorderInfo_RecorderState_descriptor();
}
template <> struct is_proto_enum< ::streamer::RecorderInfo_AudioFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::streamer::RecorderInfo_AudioFormat>() {
  return ::streamer::RecorderInfo_AudioFormat_descriptor();
}
template <> struct is_proto_enum< ::streamer::SignalInfo_SignalType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::streamer::SignalInfo_SignalType>() {
  return ::streamer::SignalInfo_SignalType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_streamer_2eproto
